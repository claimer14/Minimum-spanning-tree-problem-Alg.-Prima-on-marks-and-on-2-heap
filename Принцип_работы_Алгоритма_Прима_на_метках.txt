Алгоритм Прима на метках работает следующим образом:

Принцип работы:
* Алгоритм строит минимальное остовное дерево (MST), начиная с произвольной вершины
* На каждом шаге добавляет ребро минимального веса, соединяющее построенную часть дерева с остальным графом
* Процесс продолжается, пока все вершины не будут включены в MST

Пошаговое описание:
Шаг 1: Инициализация
- Выбираем произвольную начальную вершину (обычно вершину 0)
- Окрашиваем её в синий цвет (помечаем как выбранную)
- Все остальные вершины не окрашены

Шаг 2: Поиск минимального ребра
- Среди всех ребер, исходящих из синих вершин в неокрашенные
- Выбираем ребро с минимальным весом

Шаг 3: Добавление новой вершины
- Добавляем найденное ребро в MST
- Окрашиваем новую вершину в синий цвет
- Добавляем вес ребра к общему весу MST

Шаг 4: Повторение
- Повторяем шаги 2-3, пока все вершины не станут синими
- Или пока не найдем n-1 ребер (где n - количество вершин)

Пример работы:
Начальное состояние:
- Граф с 5 вершинами
- Вершина 0 окрашена в синий
- Остальные вершины не окрашены

Итерация 1:
- Ищем минимальное ребро из вершины 0
- Находим ребро (0,2) с весом 3
- Окрашиваем вершину 2 в синий

Итерация 2:
- Ищем минимальное ребро из вершин 0 и 2
- Находим ребро (2,1) с весом 2
- Окрашиваем вершину 1 в синий

И так далее...

Критерии завершения:
Алгоритм завершается, когда все вершины окрашены в синий цвет
Или когда найдено V-1 ребер для MST
Если граф несвязный, алгоритм не сможет построить MST
Особенности реализации на метках:
Используется массив меток (selected) для отслеживания окрашенных вершин
На каждом шаге просматриваются все возможные ребра
Выбирается ребро с минимальным весом среди допустимых

Сложность алгоритма:
Временная сложность: O(V²), где V - количество вершин
Имеет два вложенных цикла по всем вершинам
На каждом шаге просматривает все возможные ребра
Итого: O(V) O(V) = O(V²)

Требует O(V) дополнительной памяти
Эффективен на плотных графах
Менее эффективен на разреженных графах по сравнению с реализацией на куче
Преимущества:
Простота реализации
Понятный алгоритм
Хорошо работает на плотных графах
Не требует сложных структур данных

Недостатки:
Квадратичная сложность
Медленная работа на больших графах
Неэффективен на разреженных графах
Этот алгоритм является одним из классических алгоритмов построения MST и часто используется 
в учебных целях из-за своей простоты и наглядности.